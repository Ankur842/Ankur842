Create an NFS server
...

sudo su mkdir -p /data ls -alrt /data/

...

Install the NFS kernel server on the machine
...

sudo apt install nfs-kernel-server

...

Change the owner user and group to nobody and nogroup
...

sudo chown nobody:nogroup /data/

Set permissions to 777 to allow everyone to read, write, and execute files in this directory

sudo chmod 777 /data/

...

Open the exports file in the /etc directory for permission to access the host server machine
...

sudo vi /etc/exports

Add the following code to the file:

/data *(rw,sync,no_root_squash)

Note: Exit the file and save the changes

...

Here: /data – is the share folder which server wants to share rw – This will all the clients to read and write the files to the share directory. sync – which will confirm the shared directory once the changes are committed. no_root_squash – This will all the root user to connect to the designated directory.

Use the exportfs command to export all shared folders you registered in the /etc/exports file after making the appropriate changes
sudo exportfs -rv

Restart the NFS kernel server to apply the configuration changes
sudo systemctl restart nfs-kernel-server

Deploy NFS client on worker nodes
sudo apt install nfs-common

Create a MySQL manifest file and deploy it using NFS-based persistent volume
...

kubectl apply -f https://raw.githubusercontent.com/Sonal0409/Container-Orchestration-using-Kubernetes/main/Day5-Notes/mysql.yml

...

Note: The below section may change if you have a different NFS server and share folder available:

nfs: path: /data server: 172.31.58.69

kubectl get all

kubectl get pv

kubectl get pvc

kubectl get pods

Create a WordPress manifest file and deploy it using host-path-based persistent volume
...

kubectl apply -f https://raw.githubusercontent.com/Sonal0409/Container-Orchestration-using-Kubernetes/main/Day5-Notes/wordpress.yml

...

kubectl get all

kubectl get pv

kubectl get pvc

kubectl get pods

Then, open the browser and put the below URL to access the WordPress application http://localhost:<node_port>
========================================================================================================================
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mysql-nfs
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteMany
  mountOptions:
    - hard
    - nfsvers=4.1
  nfs:
    path: /data
    server: 10.128.0.20
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: mysql-nfs
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 500Mi
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
  labels:
    app: mysql-wordpress
spec:
  ports:
    - port: 3306
  selector:
    app: mysql-wordpress
    product: mysql
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  labels:
    app: mysql-wordpress
spec:
  selector:
    matchLabels:
      app: mysql-wordpress
      product: mysql
  template:
    metadata:
      labels:
        app: mysql-wordpress
        product: mysql
    spec:
      containers:
      - image: mysql
        name: mysql-container
        env:
        - name: MYSQL_DATABASE
          value: wordpress
        - name: MYSQL_ROOT_PASSWORD
          value: password 
        ports:
        - containerPort: 3306
          name: mysql
        volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-storage
        persistentVolumeClaim:
          claimName: mysql-nfs
          ===================================================================================================
          apiVersion: v1
kind: PersistentVolume
metadata:
  name: hostpath-pv
  labels:
    type: hostpath
spec:
  capacity:
    storage: 2Gi
  accessModes:
    - ReadWriteMany
  storageClassName: ""
  persistentVolumeReclaimPolicy: Delete
  hostPath:
    type: DirectoryOrCreate
    path: "/opt/wordpress"
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: wordpress-hostpath
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: ""
  resources:
    requests:
      storage: 500Mi
---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
  labels:
    app: mysql-wordpress
spec:
  ports:
    - port: 80
  selector:
    app: mysql-wordpress
    tier: frontend
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
  labels:
    app: mysql-wordpress
spec:
  selector:
    matchLabels:
      app: mysql-wordpress
      tier: frontend
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql-wordpress
        tier: frontend
    spec:
      containers:
      - image: wordpress
        name: wordpress
        env:
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_USER
          value: root
        - name: WORDPRESS_DB_PASSWORD
          value: password
        ports:
        - containerPort: 80
          name: wordpress
        volumeMounts:
        - name: wordpress-storage
          mountPath: /var/www/html
      volumes:
      - name: wordpress-storage
        persistentVolumeClaim:
          claimName: wordpress-hostpath
